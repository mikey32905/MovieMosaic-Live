@page "/showMosaic"

@rendermode @(new InteractiveServerRenderMode(prerender: false))

@inject ITMDBService tmdbService
@inject IGameSettingsService gameSettingsService

<PageTitle>Show Mosaic</PageTitle>

<div class="container-xxl text-center mt-3">
    <div>
        <img src="/img/mw1024_ShowMosaicLogo.png" class="title-img" />
        <h5 class="subTitle">Piece Together the Show, One Tile at a Time.</h5>
    </div>
</div>
<div class="container-xxl game-container">
    <div class="gameBoard-container">
        <div class="poster-container">
            <img src="@randomTVShow.PosterPath" class="poster-img" />
            <div class="poster-overlay row row-cols-3 g-0">
                @foreach (var square in squareList)
                {
                    <div class="col overlay-block @(square.Show ? "fade-out" : "")">
                    </div>
                }
            </div>
        </div>
    </div>
    <div class="controls-container rounded" data-bs-theme="dark">
        <div>
            <div class="mt-4">
                <EditForm Model="showFormModel" OnValidSubmit="HandleSubmit">
                    <DataAnnotationsValidator />
                    <div class="hstack gap-3">
                        <InputText class="form-control" placeholder="Enter a TV show title"
                                   @bind-value="showFormModel.ShowTitle"
                                   autocomplete="off"
                                   autocorrect="off"
                                   spellcheck="false"
                                   @oninput="OnInputChanged" />
                        <button class="btn btn-primary" type="submit">Guess</button>
                    </div>
                    <ValidationMessage For="() => showFormModel.ShowTitle" />
                    <!--Show the type ahead results-->
                    @if (tVShows?.Any() == true)
                    {
                        <div class="suggestions-wrapper">
                            <ul class="suggestions">
                                @foreach (var tVShow in tVShows)
                                {
                                    <li @onclick="() => SelectTVShow(tVShow)">@tVShow.Name </li>
                                }
                            </ul>
                        </div>
                    }
                </EditForm>
            </div>
            <nav class="mt-3">
                <div class="nav nav-tabs" id="nav-tab" role="tablist">
                    <button class="nav-link active" id="nav-hint-tab"
                            data-bs-toggle="tab"
                            data-bs-target="#nav-hint"
                            type="button"
                            role="tab"
                            aria-selected="true">
                        Hints
                    </button>
                    <button class="nav-link" id="nav-guess-tab"
                            data-bs-toggle="tab"
                            data-bs-target="#nav-guess"
                            type="button"
                            role="tab"
                            aria-selected="false">
                        Guesses
                    </button>
                </div>
            </nav>
            <div class="tab-content" id="nav-tabContent">
                <div class="tab-pane border-0 fade show active" id="nav-hint"
                     role="tabpanel" aria-label="nav-hint-tab" tabindex="0">
                    <ul class="list-group mb-3" id="Hints">
                        @foreach (var hint in hints.OrderBy(h => h.Order))
                        {
                            if (guesses.Count + 1 >= hint.Order || hint.Show)
                            {
                                <li class="list-group-item">
                                    <i class="bi bi-@hint.Order-square-fill me-1"></i>@hint.HintText
                                </li>
                            }
                        }
                    </ul>
                </div>
                <div class="tab-pane border-0 fade" id="nav-guess"
                     role="tabpanel" aria-label="nav-guess-tab" tabindex="0">
                    <ul class="list-group mb-3" id="Guesses">
                        @for (int i = 0; i < guesses.Count; i++)
                        {
                            var guess = guesses[i];

                            if (guess.Correct)
                            {
                                <li class="list-group-item  list-group-item-success">
                                    <i class="bi bi-@(i + 1)-square-fill me-1"></i>
                                    <span>@guess.Title</span>
                                </li>
                            }
                            else
                            {
                                <li class="list-group-item list-group-item-danger">
                                    <i class="bi bi-@(i + 1)-square-fill me-1"></i>
                                    <span>@guess.Title</span>
                                </li>

                            }
                        }

                    </ul>
                </div>
                <div class="hstack gap-2 justify-content-end">
                    <button class="btn btn-info controls-btn" @onclick="PlayItAgain">Play Again</button>
                    <button class="btn controls-btn" data-bs-toggle="modal" data-bs-target="#showInstructionsModal">
                        <i class="bi bi-question-circle text-secondary"></i>
                    </button>
                    <button class="btn controls-btn" data-bs-toggle="offcanvas" data-bs-target="#offcanvasSettings" aria-controls="offcanvasRight">
                        <i class="bi bi-gear text-secondary"></i>
                    </button>
                </div>

            </div>
        </div>
    </div>

</div>

<WinLossTVOverlay IsWin="@win"
                  IsVisible="@showOverlay"
                  ShowTitle="@randomTVShow.Name"
                  Guesses="@guesses.Count"
                  OnClose="CloseOverlay" />

<ShowsInstructionsModal />

<ShowGameSettings Genres="genres" ShowsGameSettings="showGameSettings" OnSubmit="ApplyGameSettings" />

@code {
    #region State Variables

    ShowFormModel showFormModel = new ShowFormModel();
    private TVShow randomTVShow = new TVShow();

    private int squareCount = 12;
    private int yearStart = 1970;
    private int yearEnd = 2030;
    private string selectedGenres = "";

    List<Square> squareList = new List<Square>();
    private List<TVShow> tVShows = new List<TVShow>();
    private List<Guess> guesses = [];
    private List<Hint> hints = new();
    private List<Genre> genres = [];

    private ShowMosaicGameSettings showGameSettings = new ShowMosaicGameSettings();


    //timers
    private Timer? debounceTimer;
    private Timer? inactivityTimer;

    private int debounceDelay = 500; //milliseconds

    //game state variables
    private int maxGuesses = 5;
    private bool gameOver = false;
    private bool win = false;
    private bool showOverlay = false;

    #endregion State Variables

    #region Game Flow

    private async Task PlayItAgain()
    {
        //reset the game state
        await ResetGameState();

        //start a new game
        await NewGame();

        Task.Delay(2000).Wait(); //wait for a second to let the UI update

        //show a random square
        showRandomSquare();

        // StateHasChanged();
    }


    private async Task NewGame()
    {
        randomTVShow = new TVShow();
        win = false;
        randomTVShow = await tmdbService.GetRandomTVShowAsync(yearStart, yearEnd, selectedGenres);

        await GetShowHints(randomTVShow.Id);

    }

    private async Task ResetGameState()
    {
        squareList = new();

        for (int i = 1; i <= squareCount; i++)
        {
            Square newSquare = new();
            newSquare.Show = false;
            squareList.Add(newSquare);
        }

        //clear guess text input
        showFormModel = new();
        guesses = new();
        hints = new();
        win = false;
        gameOver = false;
        showOverlay = false;
    }

    private async Task ApplyGameSettings(ShowMosaicGameSettings gameSettings)
    {
        yearStart = gameSettings.YearStart;
        yearEnd = gameSettings.YearEnd;

        if (gameSettings.SelectedGenre == 0)
        {
            selectedGenres = "";
        }
        else
        {
            selectedGenres = gameSettings.SelectedGenre.ToString();
        }

        await gameSettingsService.SaveShowMosaicGameSettingsAsync(gameSettings);


        //Reset Game
        await PlayItAgain();
    }

    private void showRandomSquare()
    {
        Random random = new Random();

        List<Square> hiddenSquares = squareList.Where(s => s.Show == false).ToList();

        if (hiddenSquares.Count > 0)
        {
            //pick a random square from the hidden squares
            int randomIndex = random.Next(hiddenSquares.Count());
            hiddenSquares[randomIndex].Show = true;
        }
    }

    private void CloseOverlay()
    {
        showOverlay = false;
    }

    private void showAllHints()
    {
        foreach (var hint in hints)
        {
            hint.Show = true;
        }
    }

    private void RevealPoster()
    {
        foreach (var square in squareList)
        {
            square.Show = true;
        }
    }

    private async Task HandleSubmit()
    {
        if (showFormModel.ShowTitle?.ToLower() == randomTVShow.Name?.ToLower())
        {
            StateHasChanged();

            //show movie poster
            RevealPoster();

            //show all hints
            showAllHints();

            win = true;
            gameOver = true;
        }
        else
        {
            //show a new random square
            showRandomSquare();
            win = false;
            gameOver = false;
        }

        guesses.Add(new Guess
        {
            Title = showFormModel.ShowTitle,
            Correct = win
        });

        //check if the max guesses have been reached
        if (guesses.Count >= maxGuesses)
        {
            gameOver = true;
            win = false;
            RevealPoster();
        }

        if (gameOver)
        {
            showOverlay = true;
        }
    }

    #endregion Game Flow

    #region Lifecycle Events

    protected override async Task OnInitializedAsync()
    {
        // Initialize the game state
        genres = await tmdbService.GetTvShowGenresAsync();

        showGameSettings = await gameSettingsService.GetShowMosaicGameSettings();
        await ApplyGameSettings(showGameSettings);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // await PlayItAgain();
            // StateHasChanged();
        }
    }

    #endregion Lifecycle Events

    #region Search Type Ahead

    private async Task SearchTVShows()
    {
        //if search is empty and clear results.
        if (string.IsNullOrEmpty(showFormModel.ShowTitle))
        {
            tVShows.Clear();
        }
        else
        {
            try
            {
                var response = await tmdbService.SearchTVShowsAsync(showFormModel.ShowTitle);

                tVShows = response ?? new List<TVShow>();
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error searching TV shows: {ex.Message}");
                tVShows.Clear();
            }
        }

        //trigger a re-render to refresh UI.
        StateHasChanged();
    }

    private void OnInputChanged(ChangeEventArgs e)
    {
        // Update the model with the new input value
        showFormModel.ShowTitle = e.Value?.ToString() ?? string.Empty;

        //dispose any existing search timers
        debounceTimer?.Dispose();

        //create a new timer that calls search movies after a debounce delay
        debounceTimer = new Timer(async _ =>
         {

             await InvokeAsync(async () =>
         {
             await SearchTVShows();
             ResetInactivityTimer();
         });
         }, null, debounceDelay, Timeout.Infinite);

    }

    private void ResetInactivityTimer()
    {
        inactivityTimer?.Dispose();

        inactivityTimer = new Timer(_ =>
        {
            // Handle inactivity (e.g., show a message, log out, etc.)
            InvokeAsync(() =>
        {
            tVShows.Clear();
            StateHasChanged();

        });
        }, null, 10000, Timeout.Infinite); // 30 seconds of inactivity
    }

    private void SelectTVShow(TVShow tVShow)
    {
        // Set the selected TV show in the form model
        showFormModel.ShowTitle = tVShow.Name;

        // Clear the search results
        tVShows.Clear();

    }

    #endregion Search Type Ahead

    #region UI Helpers

    public async Task GetShowHints(int showId)
    {
        var tvShowDetails = await tmdbService.GetTVShowDetailsAsync(showId);

        if (tvShowDetails is not null)
        {
            var firstAirDateYear = DateTime.TryParse(tvShowDetails.FirstAirDate, out var date) ? date.Year.ToString() : "";
            string genreName = tvShowDetails.Genres?.FirstOrDefault()?.Name ?? "";
            string tagline = tvShowDetails.Tagline ?? "";
            string leadActor = tvShowDetails.Credits?.Cast?.FirstOrDefault()?.Name ?? "Unknown";

            //Change director to network
            string tvShowNetwork = tvShowDetails.Networks?.FirstOrDefault()?.Name ?? "Unknown";
            // string director = tvShowDetails.Credits?.Crew?.FirstOrDefault(c => c.Job == "Director")?.Name ?? "Unknown";
            string overview = tvShowDetails.Overview ?? "No Overview Available";

            //build the hints
            string taglineHint = string.IsNullOrEmpty(tagline)
                                 ? "No tagline available - The plot thickens..."
                                 : $"Here's the show tagline: {tagline}";

            string actorHint = string.IsNullOrEmpty(leadActor)
                               ? "The lead actor's is a bit of a mystery.. fitting right?"
                                 : $"{leadActor} takes the spotlight in this one";
            // string directorHint = string.IsNullOrEmpty(director)
            //                     ? "Directed by... Well, that part's classified."
            //                     : $"{director} is the mastermind behind this one";

            string networkHint = string.IsNullOrEmpty(tvShowNetwork)
                                ? "The network showing this series is still a mystery."
                                : $"{tvShowNetwork} is the network that aired this series."; 

            string genreHint = string.IsNullOrEmpty(genreName)
                                ? "Genre? It's a mystery wrapped in an enigma."
                                : $"This {genreName.ToLower()} series dropped in {firstAirDateYear}.";


            string overviewHint = string.IsNullOrEmpty(overview)
                ? "Overview? More like over-guessing!"
                : $"Here's a sneak peek: \"{overview}\"";

            hints = new List<Hint>
            {
                BuildHint(taglineHint, 1),
                BuildHint(actorHint, 2),
                BuildHint(networkHint, 3),
                BuildHint(genreHint, 4),
                BuildHint(overviewHint, 5)
            };
        }
    }

    public Hint BuildHint(string hintText, int order)
    {
        // This method can be used to return hints for the movie
        // For now, it returns a placeholder object
        return new Hint
        {
            HintText = hintText,
            Show = false,
            Order = order
        };
    }

    #endregion  UI Helpers

}
