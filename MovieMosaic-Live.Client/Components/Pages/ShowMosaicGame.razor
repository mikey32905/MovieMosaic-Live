@page "/showMosaic"

@rendermode InteractiveServer
@inject ITMDBService tmdbService

<PageTitle>Show Mosaic</PageTitle>

<div class="container-xxl text-center mt-3">
    <div>
        <img src="/img/mw1024_ShowMosaicLogo.png" class="title-img" />
        <h5 class="subTitle">Piece Together the Show, One Tile at a Time.</h5>
    </div>
</div>
<div class="container-xxl game-container">
    <div class="gameBoard-container">
        <div class="poster-container">
            <img src="@randomTVShow.PosterPath" class="poster-img" />
            <div class="poster-overlay row row-cols-3 g-0">
                @foreach (var square in squareList)
                {
                    <div class="col overlay-block @(square.Show ? "fade-out" : "")">
                    </div>
                }
            </div>
        </div>
    </div>
    <div class="controls-container rounded" data-bs-theme="dark">
        <div>
            <div class="mt-4">
                <EditForm Model="showFormModel" OnValidSubmit="HandleSubmit">
                    <DataAnnotationsValidator />
                    <div class="hstack gap-3">
                        <InputText class="form-control" placeholder="Enter a movie title"
                                   @bind-value="showFormModel.ShowTitle"
                                   autocomplete="off"
                                   autocorrect="off"
                                   spellcheck="false"
                                   @oninput="OnInputChanged"/>
                        <button class="btn btn-primary" type="submit">Guess</button>
                    </div>
                    <ValidationMessage For="() => showFormModel.ShowTitle" />
                        <!--Show the type ahead results-->
                        @if (tVShows?.Any() == true)
                        {
                            <div class="suggestions-wrapper">
                                <ul class="suggestions">
                                    @foreach(var tVShow in tVShows)
                                {
                                    <li @onclick="() => SelectTVShow(tVShow)">@tVShow.Name </li>
                                       
                                }
                            </ul>
                            </div>
                        }
                </EditForm>
            </div>
            <nav class="mt-3">
                <div class="nav nav-tabs" id="nav-tab" role="tablist">
                    <button class="nav-link active" id="nav-hint-tab"
                            data-bs-toggle="tab"
                            data-bs-target="#nav-hint"
                            type="button"
                            role="tab"
                            aria-selected="true">
                        Hints
                    </button>
                    <button class="nav-link" id="nav-guess-tab"
                            data-bs-toggle="tab"
                            data-bs-target="#nav-guess"
                            type="button"
                            role="tab"
                            aria-selected="false">
                        Guesses
                    </button>
                </div>
            </nav>
            <div class="tab-content" id="nav-tabContent">
                <div class="tab-pane border-0 fade show active" id="nav-hint"
                     role="tabpanel" aria-label="nav-hint-tab" tabindex="0">
                    <ul class="list-group mb-3" id="Hints">
                        <li class="list-group-item">
                            <i class="bi bi-1-square-fill me-1">Hint 1 Goes Here</i>
                        </li>
                        <li class="list-group-item">
                            <i class="bi bi-2-square-fill me-1">Hint 2 Goes Here</i>
                        </li>
                        <li class="list-group-item">
                            <i class="bi bi-3-square-fill me-1">Hint 3 Goes Here</i>
                        </li>
                    </ul>
                </div>
                <div class="tab-pane border-0 fade" id="nav-guess"
                     role="tabpanel" aria-label="nav-guess-tab" tabindex="0">
                    <ul class="list-group mb-3" id="Guesses">
                        <li class="list-group-item">
                            <i class="bi bi-1-square-fill me-1">Guess 1 Goes Here</i>
                        </li>
                        <li class="list-group-item">
                            <i class="bi bi-2-square-fill me-1">Guess 2 Goes Here</i>
                        </li>
                        <li class="list-group-item">
                            <i class="bi bi-3-square-fill me-1">Guess 3 Goes Here</i>
                        </li>
                    </ul>
                </div>
            </div>
        </div>
    </div>

</div>



@code {
    #region State Variables

    ShowFormModel showFormModel = new ShowFormModel();
    private TVShow randomTVShow = new TVShow();

    private int squareCount = 12;
    private int yearStart = 1970;
    private int yearEnd = 2025;
    private string selectedGenres = "";

    List<Square> squareList = new List<Square>();
    private List<TVShow> tVShows = new List<TVShow>();

    //timers
    private Timer? debounceTimer;
    private Timer? inactivityTimer;

    private int debounceDelay = 500; //milliseconds


    private bool win = false;

    #endregion State Variables

    #region Game Flow

    private async Task NewGame()
    {
        randomTVShow = new TVShow();
        win = false;
        randomTVShow = await tmdbService.GetRandomTVShowAsync(yearStart, yearEnd, selectedGenres);

    }

    private async Task ResetGameState()
    {
        squareList = new();

        for (int i = 1; i <= squareCount; i++)
        {
            Square newSquare = new();
            squareList.Add(newSquare);
        }
    }

    private async Task showRandomSquare()
    {
        Random random = new Random();

        List<Square> hiddenSquares = squareList.Where(s => s.Show == false).ToList();

        if (hiddenSquares.Count > 0)
        {
            //pick a random square from the hidden squares
            int randomIndex = random.Next(hiddenSquares.Count());
            hiddenSquares[randomIndex].Show = true;
        }
    }

    private void RevealPoster()
    {
        foreach (var square in squareList)
        {
            square.Show = true;
        }
        ;
    }


    private async Task HandleSubmit()
    {
        if (showFormModel.ShowTitle?.ToLower() == randomTVShow.Name?.ToLower())
        {
            StateHasChanged();

            //show movie poster
            RevealPoster();

            win = true;
        }
        else
        {
            //show a new random square
            await showRandomSquare();
            win = false;
        }
        //shows a new random square
        // await showRandomSquare();
    }

    #endregion Game Flow

    #region Lifecycle Events

    protected override async Task OnInitializedAsync()
    {

    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await ResetGameState();
            // Initialize any JavaScript interop or other one-time setup here
            await NewGame();
            await showRandomSquare();
            StateHasChanged();
        }
    }

    #endregion Lifecycle Events

    #region Search Type Ahead

    private async Task SearchTVShows()
    {
        //if search is empty and clear results.
        if (string.IsNullOrEmpty(showFormModel.ShowTitle))
        {
            tVShows.Clear();
        }
        else
        {
            try
            {
                var response = await tmdbService.SearchTVShowsAsync(showFormModel.ShowTitle);

                tVShows = response ?? new List<TVShow>();
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error searching TV shows: {ex.Message}");
                tVShows.Clear();
            }
        }

        //trigger a re-render to refresh UI.
        StateHasChanged();
    }

    private void OnInputChanged(ChangeEventArgs e)
    {
        // Update the model with the new input value
        showFormModel.ShowTitle = e.Value?.ToString() ?? string.Empty;

        //dispose any existing search timers
        debounceTimer?.Dispose();

        //create a new timer that calls search movies after a debounce delay
        debounceTimer = new Timer(async _ =>
         {

             await InvokeAsync(async () =>
         {
             await SearchTVShows(); 
             ResetInactivityTimer();
         });
         }, null, debounceDelay, Timeout.Infinite);

    }

    private void ResetInactivityTimer()
    {
        inactivityTimer?.Dispose();

        inactivityTimer = new Timer(_ =>
        {
            // Handle inactivity (e.g., show a message, log out, etc.)
            InvokeAsync(() =>
        {
            tVShows.Clear();
            StateHasChanged();

        });
        }, null, 10000, Timeout.Infinite); // 30 seconds of inactivity
    }

    private void SelectTVShow(TVShow tVShow)
    {
        // Set the selected TV show in the form model
        showFormModel.ShowTitle = tVShow.Name;

        // Clear the search results
        tVShows.Clear();

    }

    #endregion Search Type Ahead


}
