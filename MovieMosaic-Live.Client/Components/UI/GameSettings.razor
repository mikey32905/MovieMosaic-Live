﻿@using System.ComponentModel.DataAnnotations
@inject IJSRuntime JSRuntime


<div class="offcanvas offcanvas-end" data-bs-theme="dark" tabindex="-1" id="offcanvasSettings" aria-labelledby="offcanvasSettingsLabel">
    <div class="offcanvas-header">
        <h5 class="offcanvas-title" id="offcanvasSettingsLabel">Game Settings</h5>
        <button type="button" class="btn-close" data-bs-dismiss="offcanvas" aria-label="Close"></button>
    </div>
    <div class="offcanvas-body">
        <EditForm Model="MovieGameSettings" OnValidSubmit="HandleSubmit">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <div class="mb-3">
                <label for="YearStart" class="form-label">Starting Year</label>
                <InputSelect class="form-select" @bind-Value="MovieGameSettings.YearStart">
                    @foreach (var decade in Decades)
                    {
                        <option value="@decade">@decade</option>
                    }
                </InputSelect>
                <ValidationMessage For="@(() => MovieGameSettings.YearStart)" />
            </div>
            <div class="mb-3">
                <label for="YearEnd" class="form-label">Ending Year</label>
                <InputSelect class="form-select" @bind-Value="MovieGameSettings.YearEnd">
                    @foreach (var decade in Decades)
                    {
                        <option value="@decade">@decade</option>
                    }
                </InputSelect>
                <ValidationMessage For="@(() => MovieGameSettings.YearEnd)" />
            </div>
            <div class="mb-3">
                <label for="genreSelect" class="form-label">Select Genre</label>
                <InputSelect class="form-select" @bind-Value="MovieGameSettings.SelectedGenre">
                    <option selected value="0">All Genres</option>
                    @foreach (var genre in Genres)
                    {
                        <option value="@genre.Id">@genre.Name</option>
                    }
                </InputSelect>
            </div>
            <div class="text-end">
                <button type="submit" class="btn-info btn">
                    Save Changes
                </button>
            </div>
       </EditForm>
    </div>
</div>

@code {

    [Parameter, EditorRequired]
    public MovieMosaicGameSettings MovieGameSettings { get; set; }


    [Parameter]
    public EventCallback<MovieMosaicGameSettings> OnSubmit { get; set; }

    [Parameter, EditorRequired]
    public List<Genre> Genres { get; set; } = new();

    private string thisYear = DateTime.Now.Year.ToString();

 //   List<Genre> Genres { get; set; } = new();
    List<int> Decades { get; set; } = new();

    protected override void OnInitialized()
    {
        // Initialize formModel with default values or fetch from a service
        int yearStart = 1900;
        int currentYear = DateTime.Now.Year;
        int currentDecade = (currentYear / 10) * 10; // Get the current decade


        for (int year = yearStart; year <= currentDecade; year += 10)
        {
            Decades.Add(year);
        }

        if (currentYear > currentDecade)
        {
            Decades.Add(currentDecade + 10); // Add the next decade if not already included
        }
    }

    private async Task HandleSubmit()
    {
        // Handle form submission logic here
        // For example, you can call a service to save the settings
        //await Task.CompletedTask; // Placeholder for async operation
        await OnSubmit.InvokeAsync(MovieGameSettings);

        await JSRuntime.InvokeVoidAsync("eval", "bootstrap.Offcanvas.getInstance(document.getElementById('offcanvasSettings'))?.hide()");
    }
}
